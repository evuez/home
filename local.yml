- hosts: localhost
  vars:
    home: "{{ansible_env.HOME}}"
    source_directory: sync
    backup_directory: sync/backup

  tasks:
    - name: Install packages
      become: true
      dnf: name={{item}}
      loop:
        - python3-psutil # Allows using `dconf` in Ansible
        - firefox
        - git
        - htop
        - neovim
        - vim
        - docker
        - docker-compose
        - ripgrep
        - nethogs
        - httpie
        - tmux
        - fish
        - fzf
        - tldr
        - xsel
        - jq
        - dnf-automatic
        - nnn
        - entr
        - bat
        - dmenu
        - sway
        - mako

    - name: Install asdf
      git:
        repo: https://github.com/asdf-vm/asdf.git
        dest: "{{home}}/.asdf"
        version: v0.6.0

    - name: Install diff-highlight
      file:
        src: /usr/share/git-core/contrib/diff-highlight
        dest: "{{home}}/.local/bin/diff-highlight"
        state: link

    - name: Prepare vim directories
      file:
        path: "{{home}}/.vim/{{item}}"
        state: directory
      loop:
        - autoload
        - swap

    - name: Install vim-plug
      get_url:
        url: https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        dest: "{{home}}/.vim/autoload/plug.vim"
        force: yes

    - name: Install vim plugins
      shell: 'vim +"PlugInstall --sync" +qa'

    - name: Check user directories
      stat:
        path: "{{home}}/{{item.dest}}"
      loop:
        - {src: 'Desktop', dest: 'desktop'}
        - {src: 'Documents', dest: 'documents'}
        - {src: 'Downloads', dest: 'downloads'}
        - {src: 'Music', dest: 'music'}
        - {src: 'Pictures', dest: 'pictures'}
        - {src: 'Public', dest: 'public'}
        - {src: 'Templates', dest: 'templates'}
        - {src: 'Videos', dest: 'videos'}
      register: check_user_directories

    - name: Lowercase user directories
      shell: mv "{{home}}/{{item.item.src}}" "{{home}}/{{item.item.dest}}"
      when: not item.stat.exists
      loop: "{{check_user_directories.results}}"

    - name: Check user directories configuration
      shell: xdg-user-dir {{item.name}}
      loop:
        - {name: 'DESKTOP', path: 'desktop'}
        - {name: 'DOCUMENTS', path: 'documents'}
        - {name: 'DOWNLOAD', path: 'downloads'}
        - {name: 'MUSIC', path: 'music'}
        - {name: 'PICTURES', path: 'pictures'}
        - {name: 'PUBLICSHARE', path: 'public'}
        - {name: 'TEMPLATES', path: 'templates'}
        - {name: 'VIDEOS', path: 'videos'}
      register: check_user_directories_configuration
      changed_when: False

    - name: Update user directories configuration
      shell: xdg-user-dirs-update --set "{{item.item.name}}" "{{home}}/{{item.item.path}}"
      when: item.stdout != (home ~ '/' ~ item.item.path)
      loop: "{{check_user_directories_configuration.results}}"

    - name: Create backup directory
      file:
        path: "{{home}}/{{backup_directory}}"
        state: directory

    - name: Link configuration files
      shell: |
        [[ -d "{{home}}/.local/bin" ]] || mkdir -p "{{home}}/.local/bin"

        if [[ -e "{{home}}/{{item}}" ]]; then
          cp -r --parents -L "{{home}}/{{item}}" "{{home}}/{{backup_directory}}"
          rm -r "{{home}}/{{item}}"
        fi

        [[ -d "{{home}}"/$(dirname "{{item}}") ]] || mkdir -p "{{home}}"/$(dirname "{{item}}")

        if [[ -d "{{item}}" ]]; then
          ln -s "{{home}}/{{source_directory}}/{{item}}" "{{home}}"/$(dirname "{{item}}")
        else
          ln -s "{{home}}/{{source_directory}}/{{item}}" "{{home}}/{{item}}"
        fi
      loop:
        - .bash_profile
        - .config/alacritty/alacritty.yml
        - .config/fish/config.fish
        - .config/fish/fishd.aura
        - .config/fish/fishd.osiris.home
        - .config/fish/functions
        - .config/mako/config
        - .config/nvim/init.vim
        - .config/ripgrep/config
        - .config/sway/config
        - .config/sway/status
        - .ctags
        - .gitconfig
        - .inputrc
        - .local/bin/rgs
        - .local/bin/router-stats
        - .local/bin/switch-audio
        - .tmux.conf
        - .vimrc

    - name: Update GNOME settings
      dconf:
        key: "{{item.key}}"
        value: "{{item.value}}"
      loop:
        - {key: '/org/gnome/desktop/interface/clock-show-date', value: 'true'}
        - {key: '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/name', value: "'Terminal'"}
        - {key: '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/binding', value: "'<Super>t'"}
        - {key: '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/command', value: "'alacritty'"}
        - {key: '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/name', value: "'Web Browser'"}
        - {key: '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/binding', value: "'HomePage'"}
        - {key: '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/command', value: "'firefox -P -no-remote'"}
        - {key: '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings', value: "['/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/']"}
        - {key: '/org/gnome/settings-daemon/plugins/media-keys/www', value: "'<Super>w'"}
        - {key: '/org/gnome/settings-daemon/plugins/media-keys/home', value: "'<Super>f'"}
        - {key: '/org/gnome/settings-daemon/plugins/media-keys/email', value: "''"}
        - {key: '/org/gnome/settings-daemon/plugins/media-keys/search', value: "''"}

    - name: Enable DNF automatic
      systemd:
        name: dnf-automatic-install.timer
        enabled: yes
        state: started

    - name: Remove GNOME bloat
      become: true
      dnf:
        name:
          - cheese
          - evolution
          - evolution-ews
          - evolution-help
          - gfbgraph
          - gnome-boxes
          - gnome-calendar
          - gnome-contacts
          - gnome-dictionary
          - gnome-documents
          - gnome-getting-started-docs
          - gnome-initial-setup
          - gnome-maps
          - gnome-online-miners
          - gnome-photos
          - gnome-software
          - gnome-user-docs
          - gnome-user-share
          - gnome-video-effects
          - gnome-weather
          - simple-scan
          - totem
          - tracker-miners
          - yelp
          - PackageKit-command-not-found
        state: absent

    - name: Install core GNOME packages
      become: true
      dnf:
        name:
          - eog
          - evince
          - evolution-data-server
          - flatpak
          - gdm
          - gnome-keyring
          - gnome-menus
          - gnome-screenshot
          - gnome-shell
          - gnome-terminal
          - gnome-tweaks
          - nautilus
          - redhat-menus
        state: present

    - name: Mask unwanted GNOME services
      systemd:
        name: "{{item}}"
        scope: user
        masked: yes
        state: stopped
      loop:
        - evolution-addressbook-factory.service
        - evolution-calendar-factory.service
        - evolution-source-registry.service
        - gvfs-goa-volume-monitor.service
        - tracker-store.service

    - name: Remove tracker databases
      file:
        name: "{{home}}/.cache/tracker"
        state: absent

    - name: Add throttle to DNF
      lineinfile:
        path: /etc/dnf/dnf.conf
        regexp: "^{{item}}$"
        line: {{item}}
      loop:
        - 'throttle=100k'
